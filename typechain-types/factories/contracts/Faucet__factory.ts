/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Faucet, FaucetInterface } from "../../contracts/Faucet";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token1",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token3",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount3",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_lockhourPeriods",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "amount0",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "amount1",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "amount2",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "amount3",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount3",
        type: "uint256",
      },
    ],
    name: "changeAmountToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newlockhourPeriods",
        type: "uint256",
      },
    ],
    name: "changeLockHourPeriods",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "newTime",
        type: "uint256",
      },
    ],
    name: "changeTimeFaucet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token1",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token3",
        type: "address",
      },
    ],
    name: "changeToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getFaucet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isOpen",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lockhourPeriods",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "timeFaucet",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "togleOpen",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token0",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token1",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token2",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token3",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "withdrawToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200182d3803806200182d8339818101604052810190620000379190620002a2565b620000576200004b620001a860201b60201c565b620001b060201b60201c565b88600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060068190555084600781905550836008819055508260098190555081600a819055506001600b60006101000a81548160ff021916908315150217905550505050505050505050620003ed565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200028581620003b9565b92915050565b6000815190506200029c81620003d3565b92915050565b60008060008060008060008060006101208a8c031215620002c257600080fd5b6000620002d28c828d0162000274565b9950506020620002e58c828d0162000274565b9850506040620002f88c828d0162000274565b97505060606200030b8c828d0162000274565b96505060806200031e8c828d016200028b565b95505060a0620003318c828d016200028b565b94505060c0620003448c828d016200028b565b93505060e0620003578c828d016200028b565b9250506101006200036b8c828d016200028b565b9150509295985092959850929598565b600062000388826200038f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620003c4816200037b565b8114620003d057600080fd5b50565b620003de81620003af565b8114620003ea57600080fd5b50565b61143080620003fd6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806389476069116100b8578063d21220a71161007c578063d21220a7146102ba578063de186003146102d8578063ef14101e14610308578063f2fde38b14610326578063f400fde414610342578063f4e4b5001461036057610137565b8063894760691461023c5780638da5cb5b146102585780639906d175146102765780639b0eea1014610294578063bec9e699146102b057610137565b806347535d7b116100ff57806347535d7b146101be578063715018a6146101dc5780637543af9c146101e65780637a65ba0014610204578063871721891461022057610137565b8063057bfcc71461013c5780630dfe16811461015a57806325be124e146101785780632c4d844a14610196578063339b2fee146101a0575b600080fd5b61014461037c565b604051610151919061123e565b60405180910390f35b610162610382565b60405161016f91906111a3565b60405180910390f35b6101806103a8565b60405161018d91906111a3565b60405180910390f35b61019e6103ce565b005b6101a8610854565b6040516101b5919061123e565b60405180910390f35b6101c661085a565b6040516101d39190611188565b60405180910390f35b6101e461086d565b005b6101ee610881565b6040516101fb919061123e565b60405180910390f35b61021e60048036038101906102199190610e65565b610887565b005b61023a60048036038101906102359190610f2d565b610999565b005b61025660048036038101906102519190610e3c565b6109ab565b005b610260610ad3565b60405161026d9190611144565b60405180910390f35b61027e610afc565b60405161028b919061123e565b60405180910390f35b6102ae60048036038101906102a99190610f7f565b610b02565b005b6102b8610b2c565b005b6102c2610b60565b6040516102cf91906111a3565b60405180910390f35b6102f260048036038101906102ed9190610e3c565b610b86565b6040516102ff919061123e565b60405180910390f35b610310610b9e565b60405161031d91906111a3565b60405180910390f35b610340600480360381019061033b9190610e3c565b610bc4565b005b61034a610c48565b604051610357919061123e565b60405180910390f35b61037a60048036038101906103759190610ec8565b610c4e565b005b60095481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b60009054906101000a900460ff1661041d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104149061121e565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156104aa5742600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b42600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111561052c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610523906111de565b60405180910390fd5b600654610e1061053c91906112c0565b42610547919061126a565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336007546040518363ffffffff1660e01b81526004016105e992919061115f565b602060405180830381600087803b15801561060357600080fd5b505af1158015610617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063b9190610f04565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336008546040518363ffffffff1660e01b815260040161069b92919061115f565b602060405180830381600087803b1580156106b557600080fd5b505af11580156106c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ed9190610f04565b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336009546040518363ffffffff1660e01b815260040161074d92919061115f565b602060405180830381600087803b15801561076757600080fd5b505af115801561077b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079f9190610f04565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600a546040518363ffffffff1660e01b81526004016107ff92919061115f565b602060405180830381600087803b15801561081957600080fd5b505af115801561082d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108519190610f04565b50565b60065481565b600b60009054906101000a900460ff1681565b610875610c9e565b61087f6000610d1c565b565b600a5481565b61088f610c9e565b83600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6109a1610c9e565b8060068190555050565b6109b3610c9e565b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6109d7610ad3565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a109190611144565b60206040518083038186803b158015610a2857600080fd5b505afa158015610a3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a609190610f56565b6040518363ffffffff1660e01b8152600401610a7d92919061115f565b602060405180830381600087803b158015610a9757600080fd5b505af1158015610aab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acf9190610f04565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60075481565b610b0a610c9e565b83600781905550826008819055508160098190555080600a8190555050505050565b610b34610c9e565b600b60009054906101000a900460ff1615600b60006101000a81548160ff021916908315150217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60056020528060005260406000206000915090505481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610bcc610c9e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c33906111be565b60405180910390fd5b610c4581610d1c565b50565b60085481565b610c56610c9e565b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b610ca6610de0565b73ffffffffffffffffffffffffffffffffffffffff16610cc4610ad3565b73ffffffffffffffffffffffffffffffffffffffff1614610d1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d11906111fe565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600081359050610df7816113b5565b92915050565b600081519050610e0c816113cc565b92915050565b600081359050610e21816113e3565b92915050565b600081519050610e36816113e3565b92915050565b600060208284031215610e4e57600080fd5b6000610e5c84828501610de8565b91505092915050565b60008060008060808587031215610e7b57600080fd5b6000610e8987828801610de8565b9450506020610e9a87828801610de8565b9350506040610eab87828801610de8565b9250506060610ebc87828801610de8565b91505092959194509250565b60008060408385031215610edb57600080fd5b6000610ee985828601610de8565b9250506020610efa85828601610e12565b9150509250929050565b600060208284031215610f1657600080fd5b6000610f2484828501610dfd565b91505092915050565b600060208284031215610f3f57600080fd5b6000610f4d84828501610e12565b91505092915050565b600060208284031215610f6857600080fd5b6000610f7684828501610e27565b91505092915050565b60008060008060808587031215610f9557600080fd5b6000610fa387828801610e12565b9450506020610fb487828801610e12565b9350506040610fc587828801610e12565b9250506060610fd687828801610e12565b91505092959194509250565b610feb8161131a565b82525050565b610ffa8161132c565b82525050565b61100981611362565b82525050565b600061101c602683611259565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611082601a83611259565b91507f4974206973206e6f742074696d6520706c6561736520776169740000000000006000830152602082019050919050565b60006110c2602083611259565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000611102600c83611259565b91507f46616375657420436c6f736500000000000000000000000000000000000000006000830152602082019050919050565b61113e81611358565b82525050565b60006020820190506111596000830184610fe2565b92915050565b60006040820190506111746000830185610fe2565b6111816020830184611135565b9392505050565b600060208201905061119d6000830184610ff1565b92915050565b60006020820190506111b86000830184611000565b92915050565b600060208201905081810360008301526111d78161100f565b9050919050565b600060208201905081810360008301526111f781611075565b9050919050565b60006020820190508181036000830152611217816110b5565b9050919050565b60006020820190508181036000830152611237816110f5565b9050919050565b60006020820190506112536000830184611135565b92915050565b600082825260208201905092915050565b600061127582611358565b915061128083611358565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156112b5576112b4611386565b5b828201905092915050565b60006112cb82611358565b91506112d683611358565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561130f5761130e611386565b5b828202905092915050565b600061132582611338565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061136d82611374565b9050919050565b600061137f82611338565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6113be8161131a565b81146113c957600080fd5b50565b6113d58161132c565b81146113e057600080fd5b50565b6113ec81611358565b81146113f757600080fd5b5056fea2646970667358221220bd4d9c03ecda790f42b88493fb9e782b8f0c8511d075707e9dff7743b7a75a8364736f6c63430008000033";

type FaucetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FaucetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Faucet__factory extends ContractFactory {
  constructor(...args: FaucetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token0: PromiseOrValue<string>,
    _token1: PromiseOrValue<string>,
    _token2: PromiseOrValue<string>,
    _token3: PromiseOrValue<string>,
    _amount0: PromiseOrValue<BigNumberish>,
    _amount1: PromiseOrValue<BigNumberish>,
    _amount2: PromiseOrValue<BigNumberish>,
    _amount3: PromiseOrValue<BigNumberish>,
    _lockhourPeriods: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Faucet> {
    return super.deploy(
      _token0,
      _token1,
      _token2,
      _token3,
      _amount0,
      _amount1,
      _amount2,
      _amount3,
      _lockhourPeriods,
      overrides || {}
    ) as Promise<Faucet>;
  }
  override getDeployTransaction(
    _token0: PromiseOrValue<string>,
    _token1: PromiseOrValue<string>,
    _token2: PromiseOrValue<string>,
    _token3: PromiseOrValue<string>,
    _amount0: PromiseOrValue<BigNumberish>,
    _amount1: PromiseOrValue<BigNumberish>,
    _amount2: PromiseOrValue<BigNumberish>,
    _amount3: PromiseOrValue<BigNumberish>,
    _lockhourPeriods: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _token0,
      _token1,
      _token2,
      _token3,
      _amount0,
      _amount1,
      _amount2,
      _amount3,
      _lockhourPeriods,
      overrides || {}
    );
  }
  override attach(address: string): Faucet {
    return super.attach(address) as Faucet;
  }
  override connect(signer: Signer): Faucet__factory {
    return super.connect(signer) as Faucet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FaucetInterface {
    return new utils.Interface(_abi) as FaucetInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Faucet {
    return new Contract(address, _abi, signerOrProvider) as Faucet;
  }
}
