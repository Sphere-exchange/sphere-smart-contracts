/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MainValueWalletInterface extends utils.Interface {
  functions: {
    "balancesSpot(address,address)": FunctionFragment;
    "balancesTrade(address,address)": FunctionFragment;
    "decreaseBalancesSpot(uint256,address,address,address,address)": FunctionFragment;
    "decreaseBalancesSpotFee(uint256,address,address)": FunctionFragment;
    "decreaseBalancesTrade(uint256,address,address,address,address)": FunctionFragment;
    "deposit(uint256,address)": FunctionFragment;
    "factoryPair()": FunctionFragment;
    "feeController()": FunctionFragment;
    "flashLoan(address,address[],uint256[],bytes)": FunctionFragment;
    "increaseBalancesSpot(uint256,address,address,address,address)": FunctionFragment;
    "increaseBalancesSpotFee(uint256,address,address)": FunctionFragment;
    "increaseBalancesTrade(uint256,address,address,address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFactoryPair(address)": FunctionFragment;
    "setFeeController(address)": FunctionFragment;
    "setSettingExchange(address)": FunctionFragment;
    "settingExchange()": FunctionFragment;
    "transferBetweenAccounts(uint256,address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balancesSpot"
      | "balancesTrade"
      | "decreaseBalancesSpot"
      | "decreaseBalancesSpotFee"
      | "decreaseBalancesTrade"
      | "deposit"
      | "factoryPair"
      | "feeController"
      | "flashLoan"
      | "increaseBalancesSpot"
      | "increaseBalancesSpotFee"
      | "increaseBalancesTrade"
      | "owner"
      | "renounceOwnership"
      | "setFactoryPair"
      | "setFeeController"
      | "setSettingExchange"
      | "settingExchange"
      | "transferBetweenAccounts"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balancesSpot",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balancesTrade",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseBalancesSpot",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseBalancesSpotFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseBalancesTrade",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "factoryPair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseBalancesSpot",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseBalancesSpotFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseBalancesTrade",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFactoryPair",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSettingExchange",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "settingExchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferBetweenAccounts",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "balancesSpot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balancesTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseBalancesSpot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseBalancesSpotFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseBalancesTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "factoryPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseBalancesSpot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseBalancesSpotFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseBalancesTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFactoryPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSettingExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settingExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferBetweenAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TransferBetweenAccounts(address,address,uint256,address)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBetweenAccounts"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface DepositEventObject {
  user: string;
  addressToken: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferBetweenAccountsEventObject {
  from: string;
  addressToken: string;
  amount: BigNumber;
  to: string;
}
export type TransferBetweenAccountsEvent = TypedEvent<
  [string, string, BigNumber, string],
  TransferBetweenAccountsEventObject
>;

export type TransferBetweenAccountsEventFilter =
  TypedEventFilter<TransferBetweenAccountsEvent>;

export interface WithdrawEventObject {
  user: string;
  addressToken: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface MainValueWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MainValueWalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balancesSpot(
      user: PromiseOrValue<string>,
      addressToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balancesTrade(
      user: PromiseOrValue<string>,
      addressToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decreaseBalancesSpot(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreaseBalancesSpotFee(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreaseBalancesTrade(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factoryPair(overrides?: CallOverrides): Promise<[string]>;

    feeController(overrides?: CallOverrides): Promise<[string]>;

    flashLoan(
      receiver: PromiseOrValue<string>,
      _token: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseBalancesSpot(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseBalancesSpotFee(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseBalancesTrade(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFactoryPair(
      _factoryPair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeController(
      _feeController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSettingExchange(
      _settingExchange: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settingExchange(overrides?: CallOverrides): Promise<[string]>;

    transferBetweenAccounts(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  balancesSpot(
    user: PromiseOrValue<string>,
    addressToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balancesTrade(
    user: PromiseOrValue<string>,
    addressToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decreaseBalancesSpot(
    amount: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    tokenMain: PromiseOrValue<string>,
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreaseBalancesSpotFee(
    amount: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    tokenMain: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreaseBalancesTrade(
    amount: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    tokenMain: PromiseOrValue<string>,
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factoryPair(overrides?: CallOverrides): Promise<string>;

  feeController(overrides?: CallOverrides): Promise<string>;

  flashLoan(
    receiver: PromiseOrValue<string>,
    _token: PromiseOrValue<string>[],
    _amount: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseBalancesSpot(
    amount: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    tokenMain: PromiseOrValue<string>,
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseBalancesSpotFee(
    amount: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    tokenMain: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseBalancesTrade(
    amount: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    tokenMain: PromiseOrValue<string>,
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFactoryPair(
    _factoryPair: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeController(
    _feeController: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSettingExchange(
    _settingExchange: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settingExchange(overrides?: CallOverrides): Promise<string>;

  transferBetweenAccounts(
    amount: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balancesSpot(
      user: PromiseOrValue<string>,
      addressToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balancesTrade(
      user: PromiseOrValue<string>,
      addressToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseBalancesSpot(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseBalancesSpotFee(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseBalancesTrade(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    factoryPair(overrides?: CallOverrides): Promise<string>;

    feeController(overrides?: CallOverrides): Promise<string>;

    flashLoan(
      receiver: PromiseOrValue<string>,
      _token: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseBalancesSpot(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseBalancesSpotFee(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseBalancesTrade(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFactoryPair(
      _factoryPair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeController(
      _feeController: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSettingExchange(
      _settingExchange: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    settingExchange(overrides?: CallOverrides): Promise<string>;

    transferBetweenAccounts(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      addressToken?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      user?: PromiseOrValue<string> | null,
      addressToken?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TransferBetweenAccounts(address,address,uint256,address)"(
      from?: PromiseOrValue<string> | null,
      addressToken?: PromiseOrValue<string> | null,
      amount?: null,
      to?: PromiseOrValue<string> | null
    ): TransferBetweenAccountsEventFilter;
    TransferBetweenAccounts(
      from?: PromiseOrValue<string> | null,
      addressToken?: PromiseOrValue<string> | null,
      amount?: null,
      to?: PromiseOrValue<string> | null
    ): TransferBetweenAccountsEventFilter;

    "Withdraw(address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      addressToken?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      addressToken?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    balancesSpot(
      user: PromiseOrValue<string>,
      addressToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balancesTrade(
      user: PromiseOrValue<string>,
      addressToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseBalancesSpot(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreaseBalancesSpotFee(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreaseBalancesTrade(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    factoryPair(overrides?: CallOverrides): Promise<BigNumber>;

    feeController(overrides?: CallOverrides): Promise<BigNumber>;

    flashLoan(
      receiver: PromiseOrValue<string>,
      _token: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseBalancesSpot(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseBalancesSpotFee(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseBalancesTrade(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFactoryPair(
      _factoryPair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeController(
      _feeController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSettingExchange(
      _settingExchange: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settingExchange(overrides?: CallOverrides): Promise<BigNumber>;

    transferBetweenAccounts(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balancesSpot(
      user: PromiseOrValue<string>,
      addressToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balancesTrade(
      user: PromiseOrValue<string>,
      addressToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreaseBalancesSpot(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreaseBalancesSpotFee(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreaseBalancesTrade(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factoryPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flashLoan(
      receiver: PromiseOrValue<string>,
      _token: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseBalancesSpot(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseBalancesSpotFee(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseBalancesTrade(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFactoryPair(
      _factoryPair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeController(
      _feeController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSettingExchange(
      _settingExchange: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settingExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferBetweenAccounts(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
