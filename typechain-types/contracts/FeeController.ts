/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface FeeControllerInterface extends utils.Interface {
  functions: {
    "claimFee(address,uint8,uint256)": FunctionFragment;
    "collectFeeReward(address,uint256[2],uint8[2])": FunctionFragment;
    "createPosition(uint256,uint256,address,address,uint8,uint256,bool)": FunctionFragment;
    "currentTickFee(address)": FunctionFragment;
    "earned(address,address,uint8,uint256)": FunctionFragment;
    "factoryPair()": FunctionFragment;
    "findTickFeeByPrice(address,uint256)": FunctionFragment;
    "infoFee(address,uint8,uint256)": FunctionFragment;
    "infoTickFee(address,uint256)": FunctionFragment;
    "lastTimeRewardApplicable(address,uint8,uint256)": FunctionFragment;
    "mainValueWallet()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardPerToken(address,uint8,uint256)": FunctionFragment;
    "setFactoryPair(address)": FunctionFragment;
    "settingExchange()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawnPosition(uint256,address,address,uint8,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimFee"
      | "collectFeeReward"
      | "createPosition"
      | "currentTickFee"
      | "earned"
      | "factoryPair"
      | "findTickFeeByPrice"
      | "infoFee"
      | "infoTickFee"
      | "lastTimeRewardApplicable"
      | "mainValueWallet"
      | "owner"
      | "renounceOwnership"
      | "rewardPerToken"
      | "setFactoryPair"
      | "settingExchange"
      | "transferOwnership"
      | "withdrawnPosition"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFeeReward",
    values: [
      PromiseOrValue<string>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPosition",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentTickFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "earned",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "factoryPair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "findTickFeeByPrice",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "infoFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "infoTickFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mainValueWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFactoryPair",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "settingExchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawnPosition",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "claimFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectFeeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentTickFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "factoryPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findTickFeeByPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "infoFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "infoTickFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainValueWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFactoryPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settingExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawnPosition",
    data: BytesLike
  ): Result;

  events: {
    "ClaimFee(address,uint256,address,uint8)": EventFragment;
    "CollectFeeReward(uint256,address,uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Staked(address,uint256,address,uint8)": EventFragment;
    "Withdrawn(address,uint256,address,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectFeeReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface ClaimFeeEventObject {
  user: string;
  reward: BigNumber;
  pair: string;
  isBuy: number;
}
export type ClaimFeeEvent = TypedEvent<
  [string, BigNumber, string, number],
  ClaimFeeEventObject
>;

export type ClaimFeeEventFilter = TypedEventFilter<ClaimFeeEvent>;

export interface CollectFeeRewardEventObject {
  reward: BigNumber;
  pair: string;
  isBuy: number;
}
export type CollectFeeRewardEvent = TypedEvent<
  [BigNumber, string, number],
  CollectFeeRewardEventObject
>;

export type CollectFeeRewardEventFilter =
  TypedEventFilter<CollectFeeRewardEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StakedEventObject {
  user: string;
  amount: BigNumber;
  pair: string;
  isBuy: number;
}
export type StakedEvent = TypedEvent<
  [string, BigNumber, string, number],
  StakedEventObject
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface WithdrawnEventObject {
  user: string;
  amount: BigNumber;
  pair: string;
  isBuy: number;
}
export type WithdrawnEvent = TypedEvent<
  [string, BigNumber, string, number],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface FeeController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeeControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimFee(
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectFeeReward(
      _pair: PromiseOrValue<string>,
      _amount: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _isBuy: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPosition(
      _amount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      craeteTickFeeID: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentTickFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    earned(
      _account: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    factoryPair(overrides?: CallOverrides): Promise<[string]>;

    findTickFeeByPrice(
      _pair: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    infoFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        finishAt: BigNumber;
        updatedAt: BigNumber;
        rewardRate: BigNumber;
        rewardPerTokenStored: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    infoTickFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        upperTickPrice: BigNumber;
        lowerTickPrice: BigNumber;
      }
    >;

    lastTimeRewardApplicable(
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mainValueWallet(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardPerToken(
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setFactoryPair(
      _factoryPair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settingExchange(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawnPosition(
      _amount: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimFee(
    _pair: PromiseOrValue<string>,
    _isBuy: PromiseOrValue<BigNumberish>,
    tickFeeID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectFeeReward(
    _pair: PromiseOrValue<string>,
    _amount: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _isBuy: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPosition(
    _amount: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    _pair: PromiseOrValue<string>,
    _isBuy: PromiseOrValue<BigNumberish>,
    tickFeeID: PromiseOrValue<BigNumberish>,
    craeteTickFeeID: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentTickFee(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  earned(
    _account: PromiseOrValue<string>,
    _pair: PromiseOrValue<string>,
    _isBuy: PromiseOrValue<BigNumberish>,
    tickFeeID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  factoryPair(overrides?: CallOverrides): Promise<string>;

  findTickFeeByPrice(
    _pair: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  infoFee(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      finishAt: BigNumber;
      updatedAt: BigNumber;
      rewardRate: BigNumber;
      rewardPerTokenStored: BigNumber;
      totalSupply: BigNumber;
    }
  >;

  infoTickFee(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      upperTickPrice: BigNumber;
      lowerTickPrice: BigNumber;
    }
  >;

  lastTimeRewardApplicable(
    _pair: PromiseOrValue<string>,
    _isBuy: PromiseOrValue<BigNumberish>,
    tickFeeID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mainValueWallet(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardPerToken(
    _pair: PromiseOrValue<string>,
    _isBuy: PromiseOrValue<BigNumberish>,
    tickFeeID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setFactoryPair(
    _factoryPair: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settingExchange(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawnPosition(
    _amount: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    _pair: PromiseOrValue<string>,
    _isBuy: PromiseOrValue<BigNumberish>,
    tickFeeID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimFee(
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    collectFeeReward(
      _pair: PromiseOrValue<string>,
      _amount: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _isBuy: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides
    ): Promise<void>;

    createPosition(
      _amount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      craeteTickFeeID: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentTickFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earned(
      _account: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factoryPair(overrides?: CallOverrides): Promise<string>;

    findTickFeeByPrice(
      _pair: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    infoFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        finishAt: BigNumber;
        updatedAt: BigNumber;
        rewardRate: BigNumber;
        rewardPerTokenStored: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    infoTickFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        upperTickPrice: BigNumber;
        lowerTickPrice: BigNumber;
      }
    >;

    lastTimeRewardApplicable(
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mainValueWallet(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardPerToken(
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFactoryPair(
      _factoryPair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    settingExchange(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawnPosition(
      _amount: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimFee(address,uint256,address,uint8)"(
      user?: PromiseOrValue<string> | null,
      reward?: null,
      pair?: null,
      isBuy?: null
    ): ClaimFeeEventFilter;
    ClaimFee(
      user?: PromiseOrValue<string> | null,
      reward?: null,
      pair?: null,
      isBuy?: null
    ): ClaimFeeEventFilter;

    "CollectFeeReward(uint256,address,uint8)"(
      reward?: null,
      pair?: null,
      isBuy?: null
    ): CollectFeeRewardEventFilter;
    CollectFeeReward(
      reward?: null,
      pair?: null,
      isBuy?: null
    ): CollectFeeRewardEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Staked(address,uint256,address,uint8)"(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      pair?: null,
      isBuy?: null
    ): StakedEventFilter;
    Staked(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      pair?: null,
      isBuy?: null
    ): StakedEventFilter;

    "Withdrawn(address,uint256,address,uint8)"(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      pair?: null,
      isBuy?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      pair?: null,
      isBuy?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    claimFee(
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectFeeReward(
      _pair: PromiseOrValue<string>,
      _amount: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _isBuy: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPosition(
      _amount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      craeteTickFeeID: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentTickFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earned(
      _account: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factoryPair(overrides?: CallOverrides): Promise<BigNumber>;

    findTickFeeByPrice(
      _pair: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    infoFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    infoTickFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastTimeRewardApplicable(
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mainValueWallet(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardPerToken(
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFactoryPair(
      _factoryPair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settingExchange(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawnPosition(
      _amount: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimFee(
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectFeeReward(
      _pair: PromiseOrValue<string>,
      _amount: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _isBuy: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPosition(
      _amount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      craeteTickFeeID: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentTickFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earned(
      _account: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factoryPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    findTickFeeByPrice(
      _pair: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    infoFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    infoTickFee(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mainValueWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardPerToken(
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFactoryPair(
      _factoryPair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settingExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawnPosition(
      _amount: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
