/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Chat {
  export type InfoChatStruct = {
    sender: PromiseOrValue<string>;
    messageData: PromiseOrValue<string>;
    time: PromiseOrValue<BigNumberish>;
  };

  export type InfoChatStructOutput = [string, string, BigNumber] & {
    sender: string;
    messageData: string;
    time: BigNumber;
  };
}

export interface ChatInterface extends utils.Interface {
  functions: {
    "allChat(uint256)": FunctionFragment;
    "allChatsLength()": FunctionFragment;
    "chat(string)": FunctionFragment;
    "getLatestMessageChat(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allChat"
      | "allChatsLength"
      | "chat"
      | "getLatestMessageChat"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allChat",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allChatsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chat",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestMessageChat",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "allChat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allChatsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLatestMessageChat",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Chat extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChatInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allChat(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        sender: string;
        messageData: string;
        time: BigNumber;
      }
    >;

    allChatsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    chat(
      message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLatestMessageChat(
      amountChat: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Chat.InfoChatStructOutput[]]>;
  };

  allChat(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      sender: string;
      messageData: string;
      time: BigNumber;
    }
  >;

  allChatsLength(overrides?: CallOverrides): Promise<BigNumber>;

  chat(
    message: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLatestMessageChat(
    amountChat: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Chat.InfoChatStructOutput[]>;

  callStatic: {
    allChat(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        sender: string;
        messageData: string;
        time: BigNumber;
      }
    >;

    allChatsLength(overrides?: CallOverrides): Promise<BigNumber>;

    chat(
      message: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getLatestMessageChat(
      amountChat: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Chat.InfoChatStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    allChat(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allChatsLength(overrides?: CallOverrides): Promise<BigNumber>;

    chat(
      message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getLatestMessageChat(
      amountChat: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allChat(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allChatsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chat(
      message: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLatestMessageChat(
      amountChat: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
