/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface RouterInterface extends utils.Interface {
  functions: {
    "factoryPair()": FunctionFragment;
    "mainValueWallet()": FunctionFragment;
    "router()": FunctionFragment;
    "trade(address,uint256,address,uint256[],address[][])": FunctionFragment;
    "tradeBoth(address,address,uint256,uint256,address,uint256[],address[][])": FunctionFragment;
    "tradeExchange(uint256,address,address,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "factoryPair"
      | "mainValueWallet"
      | "router"
      | "trade"
      | "tradeBoth"
      | "tradeExchange"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "factoryPair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mainValueWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeBoth",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeExchange",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "factoryPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainValueWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tradeBoth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tradeExchange",
    data: BytesLike
  ): Result;

  events: {
    "PairCreated(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PairCreated"): EventFragment;
}

export interface PairCreatedEventObject {
  token0: string;
  token1: string;
  pair: string;
  arg3: BigNumber;
}
export type PairCreatedEvent = TypedEvent<
  [string, string, string, BigNumber],
  PairCreatedEventObject
>;

export type PairCreatedEventFilter = TypedEventFilter<PairCreatedEvent>;

export interface Router extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    factoryPair(overrides?: CallOverrides): Promise<[string]>;

    mainValueWallet(overrides?: CallOverrides): Promise<[string]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    trade(
      dstToken: PromiseOrValue<string>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>[],
      path: PromiseOrValue<string>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tradeBoth(
      srcToken: PromiseOrValue<string>,
      dstToken: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amountInPath: PromiseOrValue<BigNumberish>[],
      path: PromiseOrValue<string>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tradeExchange(
      amountIn: PromiseOrValue<BigNumberish>,
      srcToken: PromiseOrValue<string>,
      dstToken: PromiseOrValue<string>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  factoryPair(overrides?: CallOverrides): Promise<string>;

  mainValueWallet(overrides?: CallOverrides): Promise<string>;

  router(overrides?: CallOverrides): Promise<string>;

  trade(
    dstToken: PromiseOrValue<string>,
    amountOutMin: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>[],
    path: PromiseOrValue<string>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tradeBoth(
    srcToken: PromiseOrValue<string>,
    dstToken: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>,
    amountOutMin: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    amountInPath: PromiseOrValue<BigNumberish>[],
    path: PromiseOrValue<string>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tradeExchange(
    amountIn: PromiseOrValue<BigNumberish>,
    srcToken: PromiseOrValue<string>,
    dstToken: PromiseOrValue<string>,
    amountOutMin: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    factoryPair(overrides?: CallOverrides): Promise<string>;

    mainValueWallet(overrides?: CallOverrides): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    trade(
      dstToken: PromiseOrValue<string>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>[],
      path: PromiseOrValue<string>[][],
      overrides?: CallOverrides
    ): Promise<void>;

    tradeBoth(
      srcToken: PromiseOrValue<string>,
      dstToken: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amountInPath: PromiseOrValue<BigNumberish>[],
      path: PromiseOrValue<string>[][],
      overrides?: CallOverrides
    ): Promise<void>;

    tradeExchange(
      amountIn: PromiseOrValue<BigNumberish>,
      srcToken: PromiseOrValue<string>,
      dstToken: PromiseOrValue<string>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PairCreated(address,address,address,uint256)"(
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      pair?: null,
      arg3?: null
    ): PairCreatedEventFilter;
    PairCreated(
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      pair?: null,
      arg3?: null
    ): PairCreatedEventFilter;
  };

  estimateGas: {
    factoryPair(overrides?: CallOverrides): Promise<BigNumber>;

    mainValueWallet(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    trade(
      dstToken: PromiseOrValue<string>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>[],
      path: PromiseOrValue<string>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tradeBoth(
      srcToken: PromiseOrValue<string>,
      dstToken: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amountInPath: PromiseOrValue<BigNumberish>[],
      path: PromiseOrValue<string>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tradeExchange(
      amountIn: PromiseOrValue<BigNumberish>,
      srcToken: PromiseOrValue<string>,
      dstToken: PromiseOrValue<string>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    factoryPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mainValueWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trade(
      dstToken: PromiseOrValue<string>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>[],
      path: PromiseOrValue<string>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tradeBoth(
      srcToken: PromiseOrValue<string>,
      dstToken: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      amountInPath: PromiseOrValue<BigNumberish>[],
      path: PromiseOrValue<string>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tradeExchange(
      amountIn: PromiseOrValue<BigNumberish>,
      srcToken: PromiseOrValue<string>,
      dstToken: PromiseOrValue<string>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
