/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface SettingExchangeInterface extends utils.Interface {
  functions: {
    "Fee()": FunctionFragment;
    "FeeCollector()": FunctionFragment;
    "addAllowlistAddressToken1(address)": FunctionFragment;
    "allAddressToken(uint256)": FunctionFragment;
    "allAddressTokenLength()": FunctionFragment;
    "allAllowlistAddressToken1(uint256)": FunctionFragment;
    "allAllowlistAddressToken1Length()": FunctionFragment;
    "allowlistAddressToken1(address)": FunctionFragment;
    "changeFee(uint256)": FunctionFragment;
    "changeFeeCollector(address)": FunctionFragment;
    "changeMinAmountToken0(address,uint256)": FunctionFragment;
    "changeMinAmountToken1(address,uint256)": FunctionFragment;
    "durationPaidFee()": FunctionFragment;
    "factoryPair()": FunctionFragment;
    "isSaveAddressToken(address)": FunctionFragment;
    "minAmountToken0(address)": FunctionFragment;
    "minAmountToken1(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "platformFee()": FunctionFragment;
    "removeAllowlistAddressToken1(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAddressToken(address)": FunctionFragment;
    "setDurationPaidFee(uint256)": FunctionFragment;
    "setFactoryPair(address)": FunctionFragment;
    "setPlatformAndUserFee(uint256,uint256)": FunctionFragment;
    "testERC20Token(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userFee()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Fee"
      | "FeeCollector"
      | "addAllowlistAddressToken1"
      | "allAddressToken"
      | "allAddressTokenLength"
      | "allAllowlistAddressToken1"
      | "allAllowlistAddressToken1Length"
      | "allowlistAddressToken1"
      | "changeFee"
      | "changeFeeCollector"
      | "changeMinAmountToken0"
      | "changeMinAmountToken1"
      | "durationPaidFee"
      | "factoryPair"
      | "isSaveAddressToken"
      | "minAmountToken0"
      | "minAmountToken1"
      | "owner"
      | "platformFee"
      | "removeAllowlistAddressToken1"
      | "renounceOwnership"
      | "setAddressToken"
      | "setDurationPaidFee"
      | "setFactoryPair"
      | "setPlatformAndUserFee"
      | "testERC20Token"
      | "transferOwnership"
      | "userFee"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "Fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "FeeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAllowlistAddressToken1",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allAddressToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allAddressTokenLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allAllowlistAddressToken1",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allAllowlistAddressToken1Length",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistAddressToken1",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFeeCollector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMinAmountToken0",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMinAmountToken1",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "durationPaidFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "factoryPair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSaveAddressToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "minAmountToken0",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "minAmountToken1",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllowlistAddressToken1",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddressToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDurationPaidFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFactoryPair",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformAndUserFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "testERC20Token",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "userFee", values?: undefined): string;

  decodeFunctionResult(functionFragment: "Fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAllowlistAddressToken1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allAddressToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allAddressTokenLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allAllowlistAddressToken1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allAllowlistAddressToken1Length",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistAddressToken1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMinAmountToken0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMinAmountToken1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "durationPaidFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factoryPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSaveAddressToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAmountToken0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAmountToken1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllowlistAddressToken1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddressToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDurationPaidFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFactoryPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformAndUserFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testERC20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userFee", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SettingExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SettingExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    FeeCollector(overrides?: CallOverrides): Promise<[string]>;

    addAllowlistAddressToken1(
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allAddressToken(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allAddressTokenLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    allAllowlistAddressToken1(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allAllowlistAddressToken1Length(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowlistAddressToken1(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    changeFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeFeeCollector(
      newFeeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeMinAmountToken0(
      PairOrder: PromiseOrValue<string>,
      newAmountToken0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeMinAmountToken1(
      PairOrder: PromiseOrValue<string>,
      newAmountToken1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    durationPaidFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    factoryPair(overrides?: CallOverrides): Promise<[string]>;

    isSaveAddressToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minAmountToken0(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minAmountToken1(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    platformFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeAllowlistAddressToken1(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddressToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDurationPaidFee(
      _durationPaidFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFactoryPair(
      _factoryPair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPlatformAndUserFee(
      _platformFee: PromiseOrValue<BigNumberish>,
      _userFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testERC20Token(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userFee(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  Fee(overrides?: CallOverrides): Promise<BigNumber>;

  FeeCollector(overrides?: CallOverrides): Promise<string>;

  addAllowlistAddressToken1(
    token1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allAddressToken(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  allAddressTokenLength(overrides?: CallOverrides): Promise<BigNumber>;

  allAllowlistAddressToken1(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  allAllowlistAddressToken1Length(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowlistAddressToken1(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  changeFee(
    newFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeFeeCollector(
    newFeeCollector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeMinAmountToken0(
    PairOrder: PromiseOrValue<string>,
    newAmountToken0: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeMinAmountToken1(
    PairOrder: PromiseOrValue<string>,
    newAmountToken1: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  durationPaidFee(overrides?: CallOverrides): Promise<BigNumber>;

  factoryPair(overrides?: CallOverrides): Promise<string>;

  isSaveAddressToken(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minAmountToken0(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minAmountToken1(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  platformFee(overrides?: CallOverrides): Promise<BigNumber>;

  removeAllowlistAddressToken1(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddressToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDurationPaidFee(
    _durationPaidFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFactoryPair(
    _factoryPair: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPlatformAndUserFee(
    _platformFee: PromiseOrValue<BigNumberish>,
    _userFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testERC20Token(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userFee(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    Fee(overrides?: CallOverrides): Promise<BigNumber>;

    FeeCollector(overrides?: CallOverrides): Promise<string>;

    addAllowlistAddressToken1(
      token1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    allAddressToken(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    allAddressTokenLength(overrides?: CallOverrides): Promise<BigNumber>;

    allAllowlistAddressToken1(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    allAllowlistAddressToken1Length(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowlistAddressToken1(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    changeFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeFeeCollector(
      newFeeCollector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMinAmountToken0(
      PairOrder: PromiseOrValue<string>,
      newAmountToken0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMinAmountToken1(
      PairOrder: PromiseOrValue<string>,
      newAmountToken1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    durationPaidFee(overrides?: CallOverrides): Promise<BigNumber>;

    factoryPair(overrides?: CallOverrides): Promise<string>;

    isSaveAddressToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minAmountToken0(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minAmountToken1(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    platformFee(overrides?: CallOverrides): Promise<BigNumber>;

    removeAllowlistAddressToken1(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAddressToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDurationPaidFee(
      _durationPaidFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFactoryPair(
      _factoryPair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatformAndUserFee(
      _platformFee: PromiseOrValue<BigNumberish>,
      _userFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    testERC20Token(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    Fee(overrides?: CallOverrides): Promise<BigNumber>;

    FeeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    addAllowlistAddressToken1(
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allAddressToken(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allAddressTokenLength(overrides?: CallOverrides): Promise<BigNumber>;

    allAllowlistAddressToken1(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allAllowlistAddressToken1Length(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowlistAddressToken1(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeFeeCollector(
      newFeeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeMinAmountToken0(
      PairOrder: PromiseOrValue<string>,
      newAmountToken0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeMinAmountToken1(
      PairOrder: PromiseOrValue<string>,
      newAmountToken1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    durationPaidFee(overrides?: CallOverrides): Promise<BigNumber>;

    factoryPair(overrides?: CallOverrides): Promise<BigNumber>;

    isSaveAddressToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minAmountToken0(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minAmountToken1(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    platformFee(overrides?: CallOverrides): Promise<BigNumber>;

    removeAllowlistAddressToken1(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddressToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDurationPaidFee(
      _durationPaidFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFactoryPair(
      _factoryPair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPlatformAndUserFee(
      _platformFee: PromiseOrValue<BigNumberish>,
      _userFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testERC20Token(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FeeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAllowlistAddressToken1(
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allAddressToken(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allAddressTokenLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allAllowlistAddressToken1(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allAllowlistAddressToken1Length(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowlistAddressToken1(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeFee(
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeFeeCollector(
      newFeeCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeMinAmountToken0(
      PairOrder: PromiseOrValue<string>,
      newAmountToken0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeMinAmountToken1(
      PairOrder: PromiseOrValue<string>,
      newAmountToken1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    durationPaidFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factoryPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSaveAddressToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minAmountToken0(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minAmountToken1(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platformFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAllowlistAddressToken1(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddressToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDurationPaidFee(
      _durationPaidFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFactoryPair(
      _factoryPair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformAndUserFee(
      _platformFee: PromiseOrValue<BigNumberish>,
      _userFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testERC20Token(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
