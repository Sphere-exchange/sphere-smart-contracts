/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IFeeControllerInterface extends utils.Interface {
  functions: {
    "collectFeeReward(address,uint256[2],uint8[2])": FunctionFragment;
    "createPosition(uint256,uint256,address,address,uint8,uint256,bool)": FunctionFragment;
    "getCurrentTickFee(address,uint8)": FunctionFragment;
    "withdrawnPosition(uint256,address,address,uint8,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "collectFeeReward"
      | "createPosition"
      | "getCurrentTickFee"
      | "withdrawnPosition"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "collectFeeReward",
    values: [
      PromiseOrValue<string>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPosition",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTickFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawnPosition",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "collectFeeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTickFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawnPosition",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IFeeController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFeeControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    collectFeeReward(
      _pair: PromiseOrValue<string>,
      _amount: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _isBuy: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPosition(
      _amount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      craeteTickFeeID: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentTickFee(
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawnPosition(
      _amount: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  collectFeeReward(
    _pair: PromiseOrValue<string>,
    _amount: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _isBuy: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPosition(
    _amount: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    _pair: PromiseOrValue<string>,
    _isBuy: PromiseOrValue<BigNumberish>,
    tickFeeID: PromiseOrValue<BigNumberish>,
    craeteTickFeeID: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentTickFee(
    _pair: PromiseOrValue<string>,
    _isBuy: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawnPosition(
    _amount: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    _pair: PromiseOrValue<string>,
    _isBuy: PromiseOrValue<BigNumberish>,
    tickFeeID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    collectFeeReward(
      _pair: PromiseOrValue<string>,
      _amount: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _isBuy: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides
    ): Promise<void>;

    createPosition(
      _amount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      craeteTickFeeID: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentTickFee(
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawnPosition(
      _amount: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    collectFeeReward(
      _pair: PromiseOrValue<string>,
      _amount: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _isBuy: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPosition(
      _amount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      craeteTickFeeID: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentTickFee(
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawnPosition(
      _amount: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collectFeeReward(
      _pair: PromiseOrValue<string>,
      _amount: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _isBuy: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPosition(
      _amount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      craeteTickFeeID: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentTickFee(
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawnPosition(
      _amount: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _pair: PromiseOrValue<string>,
      _isBuy: PromiseOrValue<BigNumberish>,
      tickFeeID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
