/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IMainValueWalletInterface extends utils.Interface {
  functions: {
    "balancesSpot(address,address)": FunctionFragment;
    "balancesTrade(address,address)": FunctionFragment;
    "decreaseBalancesSpot(uint256,address,address,address,address)": FunctionFragment;
    "decreaseBalancesSpotFee(uint256,address,address)": FunctionFragment;
    "decreaseBalancesTrade(uint256,address,address,address,address)": FunctionFragment;
    "deposit(uint256,address)": FunctionFragment;
    "increaseBalancesSpot(uint256,address,address,address,address)": FunctionFragment;
    "increaseBalancesSpotFee(uint256,address,address)": FunctionFragment;
    "increaseBalancesTrade(uint256,address,address,address,address)": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "balancesSpot"
      | "balancesTrade"
      | "decreaseBalancesSpot"
      | "decreaseBalancesSpotFee"
      | "decreaseBalancesTrade"
      | "deposit"
      | "increaseBalancesSpot"
      | "increaseBalancesSpotFee"
      | "increaseBalancesTrade"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balancesSpot",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balancesTrade",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseBalancesSpot",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseBalancesSpotFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseBalancesTrade",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseBalancesSpot",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseBalancesSpotFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseBalancesTrade",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "balancesSpot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balancesTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseBalancesSpot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseBalancesSpotFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseBalancesTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseBalancesSpot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseBalancesSpotFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseBalancesTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface IMainValueWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMainValueWalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balancesSpot(
      user: PromiseOrValue<string>,
      addressToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balancesTrade(
      user: PromiseOrValue<string>,
      addressToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decreaseBalancesSpot(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreaseBalancesSpotFee(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreaseBalancesTrade(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseBalancesSpot(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseBalancesSpotFee(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseBalancesTrade(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  balancesSpot(
    user: PromiseOrValue<string>,
    addressToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balancesTrade(
    user: PromiseOrValue<string>,
    addressToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decreaseBalancesSpot(
    amount: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    tokenMain: PromiseOrValue<string>,
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreaseBalancesSpotFee(
    amount: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    tokenMain: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreaseBalancesTrade(
    amount: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    tokenMain: PromiseOrValue<string>,
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseBalancesSpot(
    amount: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    tokenMain: PromiseOrValue<string>,
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseBalancesSpotFee(
    amount: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    tokenMain: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseBalancesTrade(
    amount: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    tokenMain: PromiseOrValue<string>,
    token0: PromiseOrValue<string>,
    token1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balancesSpot(
      user: PromiseOrValue<string>,
      addressToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balancesTrade(
      user: PromiseOrValue<string>,
      addressToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseBalancesSpot(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseBalancesSpotFee(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseBalancesTrade(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseBalancesSpot(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseBalancesSpotFee(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseBalancesTrade(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    balancesSpot(
      user: PromiseOrValue<string>,
      addressToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balancesTrade(
      user: PromiseOrValue<string>,
      addressToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseBalancesSpot(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreaseBalancesSpotFee(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreaseBalancesTrade(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseBalancesSpot(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseBalancesSpotFee(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseBalancesTrade(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balancesSpot(
      user: PromiseOrValue<string>,
      addressToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balancesTrade(
      user: PromiseOrValue<string>,
      addressToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreaseBalancesSpot(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreaseBalancesSpotFee(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreaseBalancesTrade(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseBalancesSpot(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseBalancesSpotFee(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseBalancesTrade(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      tokenMain: PromiseOrValue<string>,
      token0: PromiseOrValue<string>,
      token1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
